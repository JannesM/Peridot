# Copyright (c) 2021 JannesM
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

from primitives.Transaction import Transaction, Input, Output
import base64

array_flag = b'\xFF'

tx_flag = b'\x10'
tx_in   = b'\x11'
tx_out  = b'\x12'

block   = b'\x20'

def fixTimestampLength(timestamp: float) -> str:
    """Function to fix the length of time.time() result to 20 characters

    Args:
        timestamp (float): unix timestamp generated by time.time()

    Returns the string representation with length 20
    """

    timestamp = str(timestamp)
    if len(timestamp) < 20:
        diff = 20 - len(timestamp)
        placeholder = "".join('0' for _ in range(diff))
        return placeholder + timestamp
    return timestamp

def encodeTx(tx: Transaction) -> bytes:
    """Function to convert a transaction object into base64 encoded data

    Args:
        tx (Transaction): the transaction to convert

    Returns a byte string containing the base64 encoded conetent
    """
    # timestamp, hash (32), signature (64)
    encoded = tx_flag

    print('Length of timestamp is', tx.timestamp)
    assert len(fixTimestampLength(tx.timestamp).encode('utf-8')) == 20
    encoded += fixTimestampLength(tx.timestamp).encode('utf-8')
    encoded += bytes.fromhex(tx.hash)
    encoded += bytes.fromhex(tx.script_sig)
    
    # inputs, outputs
    for x in tx.inputs:
        # utxoRef, pub_key (33), signature (64)
        encoded += tx_in + bytes.fromhex(x.script_pub_key) + bytes.fromhex(x.script_sig) + x.utxoRef.encode('utf-8') + array_flag

    for x in tx.outputs:
        # addr (34)
        encoded += tx_out + x.address.encode('utf-8') + str(x.amount).encode('utf-8') + array_flag
    
    
    encoded = base64.b64encode(encoded)
    return encoded

def decodeTx(data: bytes) -> Transaction:
    """Function to convert base64 encoded data into a transaction object

    Args:
        data (bytes): the data to convert

    Returns a transaction object
    """

    data = base64.b64decode(data)
    
    if data[:1] != tx_flag:
        return None
    
    timestamp = float(data[1:21].decode('utf-8'))
    hash = data[21:53].hex()
    script_sig = data[53:117].hex()
    inputs = []
    outputs = []

    io = data[117:].split(array_flag)
    for x in io:
        if x[:1] == tx_in:
            pub_key = x[1:34].hex()
            sig = x[34:98].hex()
            utxoRef = x[98:].decode('utf-8')
            inputs.append(Input(utxoRef, pub_key, sig))

        elif x[:1] == tx_out:
            addr = x[1:35].decode('utf-8')
            amount = float(x[35:].decode('utf-8'))
            outputs.append(Output(addr, amount))

    tx = Transaction(inputs, outputs)
    tx.timestamp = timestamp
    tx.hash = hash
    tx.script_sig = script_sig

    return tx